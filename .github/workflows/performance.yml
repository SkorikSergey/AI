name: Performance Testing & Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Lighthouse CI
        run: npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-report
          path: |
            .lighthouseci/
            lighthouse-report.html

  bundle-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with analysis
        run: npm run build:analyze

      - name: Check bundle size
        run: npm run bundle:size

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: dist/bundle-analysis.html

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PR version
        run: npm run build

      - name: Start PR server
        run: npm run preview &

      - name: Wait for PR server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Run Lighthouse on PR
        run: |
          lighthouse http://localhost:4173 \
            --output json \
            --output-path ./pr-lighthouse.json \
            --chrome-flags="--headless --no-sandbox"

      - name: Checkout main branch
        run: |
          git fetch origin main
          git checkout main

      - name: Install dependencies (main)
        run: npm ci

      - name: Build main version
        run: npm run build

      - name: Kill previous server
        run: pkill -f "vite preview" || true

      - name: Start main server
        run: npm run preview -- --port 4174 &

      - name: Wait for main server
        run: npx wait-on http://localhost:4174 --timeout 60000

      - name: Run Lighthouse on main
        run: |
          lighthouse http://localhost:4174 \
            --output json \
            --output-path ./main-lighthouse.json \
            --chrome-flags="--headless --no-sandbox"

      - name: Compare performance
        run: |
          node -e "
          const pr = require('./pr-lighthouse.json');
          const main = require('./main-lighthouse.json');
          
          const metrics = ['first-contentful-paint', 'largest-contentful-paint', 'speed-index', 'interactive'];
          let hasRegression = false;
          
          console.log('## Performance Comparison\\n');
          console.log('| Metric | Main | PR | Change |');
          console.log('|--------|------|----|---------| ');
          
          metrics.forEach(metric => {
            const mainScore = main.audits[metric].numericValue;
            const prScore = pr.audits[metric].numericValue;
            const change = ((prScore - mainScore) / mainScore * 100).toFixed(1);
            const emoji = change > 10 ? '🔴' : change > 5 ? '🟡' : '🟢';
            
            console.log(\`| \${metric} | \${mainScore}ms | \${prScore}ms | \${change}% \${emoji} |\`);
            
            if (change > 10) hasRegression = true;
          });
          
          if (hasRegression) {
            console.log('\\n⚠️ Performance regression detected!');
            process.exit(1);
          }
          " > performance-comparison.md

      - name: Comment performance comparison
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('performance-comparison.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comparison
            });

  accessibility-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Run accessibility tests
        run: |
          lighthouse http://localhost:4173 \
            --only-categories=accessibility \
            --output json \
            --output-path ./accessibility-results.json \
            --chrome-flags="--headless --no-sandbox"

      - name: Check accessibility score
        run: |
          node -e "
          const results = require('./accessibility-results.json');
          const score = results.categories.accessibility.score;
          console.log('Accessibility Score:', score);
          if (score < 0.9) {
            console.log('❌ Accessibility score is below 90%');
            process.exit(1);
          } else {
            console.log('✅ Accessibility score meets requirements');
          }
          "

  load-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run load test
        run: |
          cat > load-test.yml << EOF
          config:
            target: 'http://localhost:4173'
            phases:
              - duration: 60
                arrivalRate: 10
              - duration: 120
                arrivalRate: 20
          scenarios:
            - name: 'Homepage load test'
              requests:
                - get:
                    url: '/'
                - think: 1
                - get:
                    url: '/about'
                - think: 2
          EOF
          
          artillery run load-test.yml --output load-test-results.json

      - name: Generate load test report
        run: artillery report load-test-results.json --output load-test-report.html

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: |
            load-test-results.json
            load-test-report.html

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Build application
        run: npm run build

      - name: Start server
        run: npm run preview &

      - name: Wait for server
        run: npx wait-on http://localhost:4173 --timeout 60000

      - name: Run ZAP security scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'